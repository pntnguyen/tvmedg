---
title: "Update tvmedg"
format:
  html:
    toc: true
    page-layout: full
    code-fold: show
    code-tools: true
editor: visual
message: false
warning: false
---

```{r}
library(tidyverse)
library(magrittr)
library(testthat)
library(splines)
library(data.table)
```

# Import data

```{r}
dat0 <- readRDS("../Data/tvmed_dat100_12mo.RDS")
dat0 %>% as.data.frame() %>% as_tibble()
```

# Process data function

```{r}
process_data <- function(basec,expo,med,tvar,lag,outc,time,
                         norev = NULL,tvar_to_med = FALSE,
                         cont_exp = FALSE,cont_exp_std = F,
                         sp_list = NULL,
                         sp_type = NULL,
                         sp_df= NULL, data){
  
  ## detect which variables are non-reversible
  if(length(which(expo %in% norev)) != 0){
    norev_expo <- paste0("A",which(expo %in% norev))
  } else{
    norev_expo <- NULL
  }
  
  if(length(which(med %in% norev)) != 0){
    norev_med <- paste0("M",which(med %in% norev))
  } else {
    norev_med <- NULL
  }
  
  if(length(which(tvar %in% norev)) != 0){
    norev_tvar <- paste0("L",which(tvar %in% norev))
  } else {
    norev_tvar <- NULL
  }
  
  norev_var <- c(norev_expo,norev_med,norev_tvar)


  sp_var <- NULL

  ## detect which variables in splines list
  ### time-fixed var
  if(length(which(sp_list %in% basec)) != 0){
    sp_fix <- paste0("v",which(basec %in% sp_list))
  } else{
    sp_fix <- NULL
  }
  
  sp_var[which(sp_list %in% basec)] <- sp_fix
  
  ## exposure var
  if(length(which(sp_list %in% expo)) != 0){
    sp_expo <- paste0("A",which(expo %in% sp_list))
  } else{
    sp_expo <- NULL
  }
  
  sp_var[which(sp_list %in% expo)] <- sp_expo
  
  ## mediator var
  if(length(which(sp_list %in% med)) != 0){
    sp_med <- paste0("M",which(med %in% sp_list))
  } else {
    sp_med <- NULL
  }
  
  sp_var[which(sp_list %in% med)] <- sp_med
  
  ## time-varying var
  if(length(which(sp_list %in% tvar)) != 0){
    sp_tvar <- paste0("L",which(tvar %in% sp_list))
  } else {
    sp_tvar <- NULL
  }
  
  sp_var[which(sp_list %in% tvar)] <- sp_tvar
  
  ## time var
  if(length(which(sp_list %in% time)) != 0){
    sp_time <- paste0("j")
  } else{
    sp_time <- NULL
  }
  
  sp_var[which(sp_list %in% time)] <- sp_time
  
  ## continous exposure
  if(cont_exp == F & cont_exp_std == T){
    stop("standardize only applicable when continuous exposure was TRUE, default is FALSE")
  } else if (cont_exp == F & cont_exp_std == F){
    ## binary exposure
    expo_mean <- 0
  } else if (cont_exp == T & cont_exp_std == F){
    ## continuous exposure without standardize
    expo_mean <- mean(data[,expo])
  } else if (cont_exp == T & cont_exp_std == T){
    ## continuous exposure with standardize
    expo_mean <- 0
    data[,expo] <- as.numeric(scale(data[,expo]))
  }
  
  
  ## column names of time-fixed variables
  name_v <- paste0("v",1:length(basec))
  
  out <- data.frame(id = data$id) %>% 
    mutate(data[,basec]) %>% 
    magrittr::set_colnames(c("id",name_v))
  
  ## column names of exposure variables  
  name_e <- paste0("A",1:length(expo))
  
  ## column names of mediator variables  
  name_me <- paste0("M",1:length(med))
  
  ## column names of time-varying variables  
  name_tvar <- paste0("L",1:length(tvar))
  
  
  for (i in 1:lag){
    
    ## column name of lag effect on exposure variable
    co_ex <- paste0(name_e,"l",i)
    co_me <- paste0(name_me,"l",i)
    co_tvar <- paste0(name_tvar,"l",i)
    
    for (k in 1:length(name_e)){
      
      out[,name_e[k]] <- data[,expo[k]]
      name_ep <- {{co_ex}}[k]
      out <- out %>% 
        group_by(id) %>% 
        mutate(
          {{name_ep}} := lag(!!sym(name_e[k]),n=i,default = data[1,expo[k]])
        )
      
    } 
    
    for (k in 1:length(name_me)){
      
      out[,name_me[k]] <- data[,med[k]]
      name_med <- {{co_me}}[k]
      out <- out %>% 
        group_by(id) %>% 
        mutate(
          {{name_med}} := lag(!!sym(name_me[k]),n=i,default = data[1,med[k]])
        ) 
      
    }  
    
    for (k in 1:length(name_tvar)){
      
      out[,name_tvar[k]] <- data[,tvar[k]]
      name_tv <- {{co_tvar}}[k]
      out <- out %>% 
        group_by(id) %>% 
        mutate(
          {{name_tv}} := lag(!!sym(name_tvar[k]),n=i,default = data[1,tvar[k]])
        )
      
    }
    
    
  }
  
  ## outcome variable
  out$Y <- data[,outc]
  
  ## time variable
  out$j <- data[,time]
  
  
  kq <- list()
  kq$df <- out %>% data.frame() 
  kq$norev_var <- norev_var
  kq$am <-  expo_mean
  
  ## column name
  
  eps <- kq$df %>% select(starts_with("A")) %>% colnames()
  tf <- kq$df %>% select(starts_with("v")) %>% colnames()
  tva <- kq$df %>% select(starts_with("L")) %>% colnames()
  mediator <- kq$df %>% select(starts_with("M")) %>% colnames()
  outcome <- kq$df %>% select(starts_with("Y")) %>% colnames()
  timee <- kq$df %>% select(starts_with("j")) %>% colnames()
  
  
  ### exposure variable
  if (any(eps %in% sp_var)){
    ep_sp <- sp_type[which(sp_var %in% eps)]
    ep_df <- sp_df[which(sp_var %in% eps)]
    eps <- paste0("splines::",ep_sp,"(",eps,",df=",ep_df,")")
  } 
  
  ### time-fixed variables
  if (any(tf %in% sp_var)){
    tf_sp <- sp_type[which(sp_var %in% tf)]
    tf_df <- sp_df[which(sp_var %in% tf)]
    tf_v <- keep(tf, ~ any(str_starts(.x, sp_var)))
    tf <- paste0("splines::",tf_sp,"(",tf_v,",df=",tf_df,")")
  } 
  
  ### mediator variables
  if (any(mediator %in% sp_var)){
    mediator_sp <- sp_type[which(sp_var %in% mediator)]
    mediator_df <- sp_df[which(sp_var %in% mediator)]
    mediator_v <- keep(tva, ~ any(str_starts(.x, sp_var)))
    mediator <- paste0("splines::",mediator_sp,"(",mediator_v,",df=",mediator_df,")")
  } 
  
  ### time-varying variables
  if (any(tva %in% sp_var)){
    tva_sp <- sp_type[which(sp_var %in% tva)]
    tva_df <- sp_df[which(sp_var %in% tva)]
    tva_v <- keep(tva, ~ any(str_starts(.x, sp_var)))
    tva <- paste0("splines::",tva_sp,"(",tva_v,",df=",tva_df,")")
  } 
  
  ### time variables
  if (any(timee %in% sp_var)){
    timee_sp <- sp_type[which(sp_var %in% timee)]
    timee_df <- sp_df[which(sp_var %in% timee)]
    timee <- paste0("splines::",timee_sp,"(j,df=",timee_df,")")
  } else {
    timee <- paste0("j")
  }
  
  
  ## formula for M(t)
  l_tm1 <- tva[!tva %in% name_tvar]
  m_tm1 <- mediator[!mediator %in% name_me]
  
  if (tvar_to_med == FALSE){
    formula_mt <- list()
    
    for (i in 1:length(med)){
      formula_mt[i] <- paste(name_me[i],"~",paste(c(eps,m_tm1,l_tm1,tf,timee),collapse = " + "))
    }
    
    kq$fm <- formula_mt
    
    ## formula for L(t)
    formular_lt <- list()
    
    for (i in 1:length(tvar)){
      formular_lt[i] <- paste(name_tvar[i],"~",paste(c(eps,mediator,l_tm1,tf,timee),collapse = " + "))
    }
    
    kq$fl <- formular_lt
    
    ## formula for Y(t)
    formular_y <- paste(outcome,"~",paste(c(eps,mediator,tva,tf,timee),collapse = " + "))
    kq$fy <- formular_y
    
  } else {
    formula_mt <- list()
    
    for (i in 1:length(med)){
      formula_mt[i] <- paste(name_me[i],"~",paste(c(eps,m_tm1,name_tvar,l_tm1,tf,timee),collapse = " + "))
    }
    
    kq$fm <- formula_mt
    
    ## formula for L(t)
    formular_lt <- list()
    
    for (i in 1:length(tvar)){
      formular_lt[i] <- paste(name_tvar[i],"~",paste(c(eps,m_tm1,l_tm1,tf,timee),collapse = " + "))
    }
    
    kq$fl <- formular_lt
    
    ## formula for Y(t)
    formular_y <- paste(outcome,"~",paste(c(eps,tva,mediator,tf,timee),collapse = " + "))
    kq$fy <- formular_y
  }
  
  return(kq)
}
```

## Default output

```{r}
process_data(
  basec = c("age","sex","ow","risk"),
  expo = c("L2"),
  med = c("Mp"),
  tvar = c("L1","L3"),
  outc = c("Yp"),
  lag = 2,
  time = c("mm"),
  norev = c("Mp"),
  tvar_to_med = F,
  # cont_exp = c("L2"),
  # cont_exp_std = T,
  # sp_list = c("mm","L1","sex"),
  # sp_type = c("ns","bs","bs"),
  # sp_df= c(3,3,3),
  data = dat0
) %>% str()
```

## Output with tvar_to_med = TRUE   

```{r}
process_data(
  basec = c("age","sex","ow","risk"),
  expo = c("L2"),
  med = c("Mp"),
  tvar = c("L1","L3"),
  outc = c("Yp"),
  lag = 2,
  time = c("mm"),
  norev = c("Mp"),
  tvar_to_med = T,
  # cont_exp = c("L2"),
  # cont_exp_std = T,
  # sp_list = c("mm","L1","sex"),
  # sp_type = c("ns","bs","bs"),
  # sp_df= c(3,3,3),
  data = dat0
) %>% str()
```


## Output with continous exposure with standardize, splines, 

```{r}
process_data(
  basec = c("age","sex","ow","risk"),
  expo = c("L2"),
  med = c("Mp"),
  tvar = c("L1","L3"),
  outc = c("Yp"),
  lag = 2,
  time = c("mm"),
  norev = c("Mp"),
  tvar_to_med = F,
  cont_exp = T,
  cont_exp_std = T,
  sp_list = c("mm","L1","sex"),
  sp_type = c("bs","bs","ns"),
  sp_df= c(3,3,3),
  data = dat0
) %>% str()
```

## Output with continous exposure without standardize, splines

```{r}
process_data(
  basec = c("age","sex","ow","risk"),
  expo = c("L2"),
  med = c("Mp"),
  tvar = c("L1","L3"),
  outc = c("Yp"),
  lag = 2,
  time = c("mm"),
  norev = c("Mp"),
  tvar_to_med = F,
  cont_exp = T,
  cont_exp_std = F,
  sp_list = c("mm","L1","sex"),
  sp_type = c("bs","bs","ns"),
  sp_df= c(3,3,3),
  data = dat0
) %>% str()
```

# fitg function

```{r}
## cen_and_scale function
cen_and_scale <- function(time){
  
  j_out <- list()
  
  jj <- time %>% 
    scale() 
  
  j_out[["jj"]] <- jj %>% as.numeric()
  j_out[["mean_j"]] <- attributes(jj)$`scaled:center`
  j_out[["sd_j"]] <- attributes(jj)$`scaled:scale`
  
  j_out
}

resamp <- function(data,boot = FALSE){

  df <- as.data.table(data)

  # set.seed(seed)
  # cat("Running SEED", seed, "\n")
  # cat("\n")
  # cat("Resampling Data", "\n")
  
  clusters <- unique(df$id)
  samples  <- sample(clusters, length(clusters), replace = TRUE)
  bb       <- table(samples)
  
  #— bootstrap
  if (boot == F) {
    # no bootstrap
    boot_df <- copy(df)
  } else {
    maxbb   <- max(bb)
    out_list <- vector("list", maxbb)
    
    for (zzz in seq_len(maxbb)) {
      # IDs drawn at least zzz times
      ids_zzz <- names(bb)[bb >= zzz]
      cc      <- df[id %in% ids_zzz]
      cc[, bid := paste0(id, zzz)]
      out_list[[zzz]] <- cc
    }
    
    # one single bind of all “layers”
    boot_df <- rbindlist(out_list, use.names = TRUE)
  }
  
  boot_df
}


fitg <- function(data,boot = FALSE,
                 mreg = "binomial",
                 lreg = c("binomial","gaussian","gaussian"),
                 yreg = "binomial"){
  
  res_df <- resamp(data = data$df,boot = boot)
  
  fitR <- list()
  
  fitR$df <- res_df %>% as_tibble()
  
  #----- fit parametric models for
  #--- Mediator models
  
  if(length(mreg) != length(data$fm)){
    stop("the defined regression of M is not equal")
  }
  
  for (i in 1:length(data$fm)){
    fitM <- paste0(data$fm[[i]])
    fitR$M[[i]] <- glm(fitM ,family = mreg[i], data = res_df) 
  }
  
  
  #--- Covariate models
  if(length(lreg) != length(data$fl)){
    stop("the defined regression of L is not equal")
  }
  
  for (i in 1:length(data$fl)){
    fitL <- paste0(data$fl[[i]])
    fitR$L[[i]] <- glm(fitL ,family = lreg[i], data = res_df) 
  }
  
  #--- Outcome model: 
  fitY <- paste0(data$fy)
  fitR$Y <-  glm(fitY ,family = yreg, data = res_df) 
  
  fitR$norev_var <- data$norev_var
  
  fitR$am <- data$am
  
  fitR
}
```

## Output with continuous exposure and splines list

Chổ này run ra coefficient của mình bị NA. Em có check lại bằng skeleton code thì cũng v. Em nghĩ do data mới này có vấn đề. Em import lại data chưa có 12mo thì mọi thứ bình thường á a.

```{r}
process_data(
  basec = c("age","sex","ow","risk"),
  expo = c("L2"),
  med = c("Mp"),
  tvar = c("L1","L3"),
  outc = c("Yp"),
  lag = 2,
  time = c("mm"),
  norev = c("Mp"),
  tvar_to_med = F,
  cont_exp = T,
  cont_exp_std = T,
  sp_list = c("mm","L1","sex"),
  sp_type = c("bs","bs","ns"),
  sp_df= c(3,3,4),
  data = dat0
) %>%  fitg(boot=T,
            mreg = "binomial",
            lreg = c("binomial","gaussian"),
            yreg = "binomial")
```

# Baseline_mc function

```{r}
baseline_mc <- function(data = fitR2,montecarlo = 10000){
  
  boot <- data$df
  # Select baseline visit
  df0 <- boot[boot$j==1, ]
  
  df0$idn <- 1:nrow(df0)
  
  MC <- NULL
  
  samples <- sample(df0$idn, size = montecarlo, replace = T)
  bb <- table(samples)
  
  for(zzz in 1:max(bb)) {
    cc <- df0[df0$idn %in% names(bb[bb %in% c(zzz:max(bb))]), ]
    cc$bid <- paste0(cc$idn, zzz)
    MC <- rbind(MC, cc)
  }
  
  MC$idsim <- 1:montecarlo
  
  data$res_df <- MC %>% as_tibble()
  data
}
```

## Output with standardized continous exposure 

```{r}
process_data(
  basec = c("age","sex","ow","risk"),
  expo = c("L2"),
  med = c("Mp"),
  tvar = c("L1","L3"),
  outc = c("Yp"),
  lag = 2,
  time = c("mm"),
  norev = c("Mp"),
  tvar_to_med = F,
  cont_exp = T,
  cont_exp_std = T,
  data = dat0
) %>%  fitg(boot=T,
            mreg = "binomial",
            lreg = c("binomial","gaussian"),
            yreg = "binomial")%>% 
  baseline_mc(montecarlo = 10000)
```

# g_form function

```{r}
rFunc <- function(mod, ndat) {
  pred_prob <- predict(mod, newdata = ndat, type = "response")
  return(rbinom(1, size = 1, prob = pred_prob))
}

g_form <- function(data = fitR2, ii = 2, followup = 12, am = 1, ay = 0){
  
  norev_var <- data$norev_var
  
  dddd <- data$res_df %>% data.frame()
  
  lagg <- dddd %>% dplyr::select(contains("L1l")) %>% ncol() 
  
  d2 <- dddd[dddd$idsim==ii, ]
  
  id <- d2$idsim
  id_ori <- d2$id
  
  followup <- followup
  
  # Baseline covariates
  Vp <- d2 %>% select(starts_with("v"))
  
  Yp2 <- mm <- numeric()
  
  mm[1:lagg-1] <- j <- 1
  
  Yp2[1:lagg-1] <- 0
  
  timee <- cen_and_scale(data$df$j)
  
  # mediator
  Mp <- matrix(ncol = length(data$M)) %>% data.frame()
  names(Mp) <- paste0("M",1:length(data$M))
  Mp[1:lagg-1,] <- d2 %>% select(names(Mp)) 
  
  
  # time-varying covariates (contribute to mediator models)
  Lmp <- matrix(ncol = length(data$L)) %>% data.frame()
  names(Lmp) <- paste0("L",1:length(data$L))
  Lmp[1:lagg-1,] <- d2 %>% select(names(Lmp)) 
  # time-varying covariates (contribute to outcome models)
  Lp <- Lmp
  
  for (l in lagg:followup) {
    
    if (Yp2[l-1]==1) {
      break
    } else{
      
      # Predict mediator
      var_fm <- attr(data$M[[1]]$terms, "term.labels")
      
      var_fm <- gsub(".*\\(([^,]+),.*", "\\1", var_fm)
        
      var_fm <- var_fm[-length(var_fm)] 
      
      dfMp <- d2 %>% select(matches(var_fm)) %>% 
        mutate(jj = (l-timee$mean_j)/timee$sd_j)
      
      dfMp[startsWith(colnames(dfMp), "A")] <- am
      
      
      if (l > lagg){
        
        for (zz in 1:(lagg)){
          term <- paste0("l",zz)
          # L lag
          dfMp[startsWith(colnames(dfMp), "L") & endsWith(colnames(dfMp), term)] <- Lmp[l-zz,]
          # M lag
          dfMp[startsWith(colnames(dfMp), "M") & endsWith(colnames(dfMp), term)] <- Mp[l-zz,]
        }
        
      }
      
      
      for (x in 1:length(data$M)){
        
        M_reg <- data$M[[x]]$family$family
        
        if (names(Mp[x]) %in% norev_var){
          
          if (M_reg == "binomial" & Mp[l-1,x] == 1) {
            Mp[l,x] <- 1
          } else {
            Mp[l,x] <- case_when(
              M_reg  == "binomial" ~ rFunc(data$M[[x]], dfMp),
              M_reg  == "gaussian" ~ predict(data$M[[x]], dfMp)
            )
          }
          
        } else {
          
          Mp[l,x] <- case_when(
            M_reg  == "binomial" ~ rFunc(data$M[[x]], dfMp),
            M_reg  == "gaussian" ~ predict(data$M[[x]], dfMp)
          )
          
        }
        
      }
      
      # Predict time-varying covariates (contribute to mediator models)
      # L
      var_fl <- attr(data$L[[1]]$terms, "term.labels")
      var_fl <- gsub(".*\\(([^,]+),.*", "\\1", var_fl)
      var_fl <- var_fl[-length(var_fl)] 
      dfLmp <- d2 %>% select(matches(var_fl)) %>% 
        mutate(jj = (l-timee$mean_j)/timee$sd_j)
      dfLmp[startsWith(colnames(dfLmp), "A")] <- am
      dfLmp[colnames(dfLmp) == colnames(Mp)] <- Mp[l,]
      
      
      if (l > lagg){
        
        for (zz in 1:lagg){
          term <- paste0("l",zz)
          # L lag
          dfLmp[startsWith(colnames(dfLmp), "L") & endsWith(colnames(dfLmp), term)] <- Lmp[l-zz,]
          # M lag
          dfLmp[startsWith(colnames(dfLmp), "M") & endsWith(colnames(dfLmp), term)] <- Mp[l-zz,]
        }
        
      }
      
      for (x in 1:length(data$L)){
        
        L_reg <- data$L[[x]]$family$family
        
        if (names(Lmp[x]) %in% norev_var){
          if (L_reg == "binomial" & Lmp[l-1,x] == 1){
            
            Lmp[l,x] <- 1
            
          } else {
            
            Lmp[l,x] <- case_when(
              L_reg  == "binomial" ~ rFunc(data$L[[x]], dfLmp),
              L_reg  == "gaussian" ~ predict(data$L[[x]], dfLmp)
            )
            
          }
          
        } else{
          
          Lmp[l,x] <- case_when(
            L_reg  == "binomial" ~ rFunc(data$L[[x]], dfLmp),
            L_reg  == "gaussian" ~ predict(data$L[[x]], dfLmp)
          )
          
        }
        
      }
      
      # Predict time-varying covariates (contribute to outcome models, if ay != am)
      if (ay != am) {
        dfLp <- d2 %>% select(matches(var_fl)) %>% 
          mutate(jj = (l-timee$mean_j)/timee$sd_j)
        dfLp[startsWith(colnames(dfLp), "A")] <- ay
        dfLp[colnames(dfLp) == colnames(Mp)] <- Mp[l,]
        
        if (l > lagg){
          
          for (zz in 1:lagg){
            term <- paste0("l",zz)
            # L lag
            dfLp[startsWith(colnames(dfLp), "L") & endsWith(colnames(dfLp), term)] <- Lp[l-zz,]
            # M lag
            dfLp[startsWith(colnames(dfLp), "M") & endsWith(colnames(dfLp), term)] <- Mp[l-zz,]
          }
          
        }
        
        for (x in 1:length(data$L)){
          
          L_reg <- data$L[[x]]$family$family
          
          if (names(Lp[x]) %in% norev_var){
            if (L_reg == "binomial" & Lp[l-1,x] == 1){
              
              Lp[l,x] <- 1
              
            } else {
              
              Lp[l,x] <- case_when(
                L_reg  == "binomial" ~ rFunc(data$L[[x]], dfLp),
                L_reg  == "gaussian" ~ predict(data$L[[x]], dfLp)
              )
              
            }
            
          } else {
            
            Lp[l,x] <- case_when(
              L_reg  == "binomial" ~ rFunc(data$L[[x]], dfLp),
              L_reg  == "gaussian" ~ predict(data$L[[x]], dfLp)
            )
            
          }
          
        }
        
      } else{
        Lp <- Lmp
      }
      
      # Y
      var_y <- attr(data$Y$terms, "term.labels")
      var_y <- gsub(".*\\(([^,]+),.*", "\\1", var_y)
      var_y <- var_y[-length(var_y)] 
      dfYp <- d2 %>% select(matches(var_y)) %>% 
        mutate(jj = (l-timee$mean_j)/timee$sd_j)
      dfYp[startsWith(colnames(dfYp), "A")] <- ay
      dfYp[colnames(dfYp) %in% colnames(Mp)] <- Mp[l,]
      dfYp[colnames(dfYp) %in% colnames(Lp)] <- Lp[l,] 
      
      if (l > lagg){
        
        for (zz in 1:lagg){
          term <- paste0("l",zz)
          # L lag
          dfYp[startsWith(colnames(dfYp), "L") & endsWith(colnames(dfYp), term)] <- Lp[l-zz,]
          # M lag
          dfYp[startsWith(colnames(dfYp), "M") & endsWith(colnames(dfYp), term)] <- Mp[l-zz,]
        }
        
      }
      
      Yp2[l] <- rFunc(data$Y, dfYp)
      
    }
    
    mm[l] <- l
  }
  
  colnames(Lmp) <- paste0("Lmp",1:length(data$L))
  colnames(Lp) <- paste0("Lp",1:length(data$L))
  
  # boot_num <- seed
  gdat2 <- data.frame(id, id_ori, mm, Ay = ay, Am = am, Mp, Yp2,
                      Lmp, Lp, Vp)
  gdat2$lastid <- as.numeric(!duplicated(gdat2$id, fromLast = T))
  return(gdat2)
}
```

## Output with continous exposuse and not standardize

```{r}
fitR2 <- process_data(
  basec = c("age","sex","ow","risk"),
  expo = c("L2"),
  med = c("Mp"),
  tvar = c("L1","L3"),
  outc = c("Yp"),
  lag = 2,
  time = c("mm"),
  norev = c("Mp"),
  tvar_to_med = F,
  cont_exp = T,
  cont_exp_std = F,
       sp_list = c("age","mm","L1"),
       sp_type = c("ns","bs","bs"),
       sp_df= c(4,3,3),
  data = dat0
) %>%  fitg(boot=T,
            mreg = "binomial",
            lreg = c("binomial","gaussian"),
            yreg = "binomial")%>% 
  baseline_mc(montecarlo = 10000)

```

```{r}
am <- fitR2$am
fitR2 %>% g_form(ii = 2, followup = 12, am = am+1, ay = am+1)
fitR2 %>% g_form(ii = 2, followup = 12, am = am+1, ay = am)
fitR2 %>% g_form(ii = 2, followup = 12, am = am, ay = am)
```


# Additional function

```{r}
ExtResult2 <- function(data,am) {
  Q11 <- data |> filter(lastid == 1 & Ay ==am+1 & Am ==am+1)
  Q10 <- data |> filter(lastid == 1 & Ay ==am+1 & Am ==am)
  Q00 <- data |> filter(lastid == 1 & Ay ==am & Am ==am)
  
  qq <- data.frame(mQ11 = mean(Q11$Yp2),
                   mQ10 = mean(Q10$Yp2),
                   mQ00 = mean(Q00$Yp2))
  qq
}
```


```{r}
cal_ci <- function(data,ci = 0.95,boot = T){
  
  if (boot == F){
    resu <- NULL
  } else {
    qnt <- quantile(data, na.rm = TRUE, probs = c((1-ci)/2,1 - (1-ci)/2))
    resu <- paste0("(",round(qnt[1],3),",",round(qnt[2],3),")")
  }
  resu
}
```

# Final tvmedg function

```{r}
tvmedg <- function(data,basec,expo,med,tvar,outc,time,lag = 2,
                   norev = NULL, cont_exp = FALSE,cont_exp_std = F,
                   tvar_to_med = F,
                   mreg = "binomial",
                   lreg = c("binomial","gaussian","gaussian"),
                   yreg = "binomial",
                   sp_list = NULL,sp_type = NULL,sp_df= NULL,
                   followup = 12,
                   seed = 0,montecarlo = 10,boot = FALSE,nboot = NULL,ci = .95,
                   parallel=TRUE){
  
  set.seed(seed)
  
  start_time <- Sys.time()
  
  qqq <- matrix(ncol = 3) %>% data.frame()
  colnames(qqq) <- c("mQ11","mQ10","mQ00")
  
  qqq_ci <- matrix(ncol = 3) %>% data.frame()
  colnames(qqq_ci) <- c("mQ11","mQ10","mQ00")
  
  
  ## point estimate
  
  fitR2 <- process_data(
    basec = basec,
    expo = expo,
    med = med,
    tvar = tvar,
    outc = outc,
    lag = lag,
    time = time,
    norev = norev,
    tvar_to_med = tvar_to_med,
    cont_exp = cont_exp,
    cont_exp_std = cont_exp_std,
    sp_list = sp_list,
    sp_type = sp_type,
    sp_df = sp_df,
    data = data
  )  %>% 
    fitg(boot=boot,
         mreg = mreg,
         lreg = lreg,
         yreg = yreg) %>% 
    baseline_mc(montecarlo = montecarlo)
  
  am <- fitR2$am
  
  if (parallel == TRUE){
    
    gform_wrapper2 <- function(iii, data, followup) {
      outdat11 <- g_form(ii = iii,data=data, followup = followup, ay = am+1, am = am+1)
      outdat10 <- g_form(ii = iii,data=data, followup = followup, ay = am+1, am = am)
      outdat00 <- g_form(ii = iii,data=data, followup = followup, ay = am, am = am)
      bind_rows(outdat11, outdat10, outdat00)
    }
    
    resultDatM <- future_map_dfr(1:montecarlo,  
                                 ~ gform_wrapper2(ii = .x, data = fitR2, followup = followup))
  } else {
    resultDatM <- data.frame()
    for (iii in 1:montecarlo){
      outdat11 <- g_form(ii = iii,data=data, followup = followup, ay = am+1, am = am+1)
      outdat10 <- g_form(ii = iii,data=data, followup = followup, ay = am+1, am = am)
      outdat00 <- g_form(ii = iii,data=data, followup = followup, ay = am, am = am)
      resultDatM2 <- rbind(outdat11, outdat10, outdat00)
      resultDatM <- rbind(resultDatM,resultDatM2)
    }
  }
  
  qqq <- ExtResult2(resultDatM,am = am) %>% mutate(
    rIE_b = mQ11 - mQ10,
    rDE_b = mQ10 - mQ00,
    rTE_b = mQ11 - mQ00,
    rPE_b = rIE_b/ rTE_b
  )
  
  if (boot == TRUE){
    
    for (it in 1:nboot){
      
      ## boostrap
      fitR2a <- process_data(
        basec = basec,
        expo = expo,
        med = med,
        tvar = tvar,
        outc = outc,
        lag = lag,
        time = time,
        norev = norev,
        tvar_to_med = tvar_to_med,
        cont_exp = cont_exp,
        cont_exp_std = cont_exp_std,
        sp_list = sp_list,
        sp_type = sp_type,
        sp_df = sp_df,
        data = data)  %>% 
        fitg(boot=boot,
             mreg = mreg,
             lreg = lreg,
             yreg = yreg) %>% 
        baseline_mc(montecarlo = montecarlo)
      
      am_ci <- fitR2a$am
      
      ## extract mean of q11,q10,q00 of the ith iter
      if (parallel == TRUE){
        
        gform_wrapper2 <- function(iii, data, followup) {
          outdat11 <- g_form(ii = iii,data=data, followup = followup, ay = am_ci+1, am = am_ci+1)
          outdat10 <- g_form(ii = iii,data=data, followup = followup, ay = am_ci+1, am = am_ci)
          outdat00 <- g_form(ii = iii,data=data, followup = followup, ay = am_ci, am = am_ci)
          bind_rows(outdat11, outdat10, outdat00)
        }
        
        resultDatM_ci <- future_map_dfr(1:montecarlo,  
                                        ~ gform_wrapper2(ii = .x, data = fitR2a, followup = followup))
      } else {
        resultDatM <- data.frame()
        for (iii in 1:montecarlo){
          outdat11 <- g_form(ii = iii,data=data, followup = followup, ay = am_ci+1, am = am_ci+1)
          outdat10 <- g_form(ii = iii,data=data, followup = followup, ay = am_ci+1, am = am_ci)
          outdat00 <- g_form(ii = iii,data=data, followup = followup, ay = am_ci, am = am_ci)
          resultDatM2_ci <- rbind(outdat11, outdat10, outdat00)
          resultDatM_ci <- rbind(resultDatM_ci,resultDatM2_ci)
        }
      }
      
      qqq_ci[it,] <- ExtResult2(resultDatM_ci,am = am_ci)
    }
    
    qqq_ci <- qqq_ci %>% mutate(
      rIE_b = mQ11 - mQ10,
      rDE_b = mQ10 - mQ00,
      rTE_b = mQ11 - mQ00,
      rPE_b = rIE_b/ rTE_b
    )
    
  }
  
  end_time <- Sys.time()
  elapsed_time <- end_time - start_time
  
  obj <- list()
  
  obj$ori_df <- fitR2$df
  obj$dat_MC <- resultDatM
  class(obj) <- "tvmedg"
  
  ## print result
  cat("Q(a,a):", round(qqq$mQ11, 3),cal_ci(qqq_ci$mQ11,ci,boot = boot),'\n')
  cat("Q(a,a*):", round(qqq$mQ10, 3),cal_ci(qqq_ci$mQ10,ci,boot = boot),'\n')
  cat("Q(a*,a*):", round(qqq$mQ00, 3),cal_ci(qqq_ci$mQ00,ci,boot = boot),'\n')
  
  cat("Indirect:", round(qqq$rIE_b, 3),cal_ci(qqq_ci$rIE_b,ci,boot = boot),'\n')
  cat("Direct:", round(qqq$rDE_b, 3),cal_ci(qqq_ci$rDE_b,ci,boot = boot),'\n')
  cat("Total:", round(qqq$rTE_b, 3),cal_ci(qqq_ci$rTE_b,ci,boot = boot),'\n')
  cat("Proportional explain:", 
      round(qqq$rPE_b, 3),cal_ci(qqq_ci$rPE_b,ci,boot = boot),'\n')
  
  cat("Total time elapsed:",elapsed_time,attr(elapsed_time,"units"),'\n')
  
  invisible(obj)
  
}
```

# run

## Default

```{r}
library(furrr)
library(doParallel)

cl <- makeCluster(8)
registerDoParallel(cl)

tvmedg(data = dat0,
       basec = c("age","sex","ow","risk"),
       expo = c("Ap"),
       med = c("Mp"),
       tvar = c("L1","L2","L3"),
       outc = c("Yp"),
       time = c("mm"),
       lag = 2,
       norev = c("Mp"),
       cont_exp = FALSE,
       cont_exp_std = F,
       tvar_to_med = F,
       mreg = "binomial",
       lreg = c("binomial","gaussian","gaussian"),
       yreg = "binomial",
       sp_list = NULL,
       sp_type = NULL,
       sp_df= NULL,
       followup = 12,
       seed = 0,
       montecarlo = 10,
       boot = FALSE, 
       nboot = NULL,
       ci = .95,
       parallel=TRUE)
```

## Đổi các agument

Gồm: continuous exposure,cont_exp_std,tvar_to_med =T, thêm splines + dof, bootraping

```{r}
tvmedg(data = dat0,
       basec = c("age","sex","ow","risk"),
       expo = c("L2"),
       med = c("Mp"),
       tvar = c("L1","L3"),
       outc = c("Yp"),
       time = c("mm"),
       lag = 2,
       norev = c("Mp"),
       cont_exp = T,
       cont_exp_std = T,
       tvar_to_med = T,
       mreg = "binomial",
       lreg = c("binomial","gaussian"),
       yreg = "binomial",
       sp_list = c("age","mm","L1"),
       sp_type = c("ns","bs","bs"),
       sp_df= c(4,3,3),
       followup = 12,
       seed = 123,
       montecarlo = 10,
       boot = T, 
       nboot = 2,
       ci = .95,
       parallel=TRUE)
```

