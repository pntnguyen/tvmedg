---
title: "tvmedg package"
format:
  html:
    toc: true
    page-layout: full
    code-fold: show
    code-tools: true
editor: visual
message: false
warning: false
---

```{r}
library(tidyverse)
library(magrittr)
library(testthat)
library(splines)
```

# Import data

```{r}
dat0 <- readRDS("../Data/tvmed_dat100.RDS")
dat0 %>% as.data.frame() %>% head()
```

# df_prep function

```{r}
df_prep <- function(data) {
  
  df <- data.frame(id = data$id)
  
  # Baseline characteristics
  df$v1 <- data$age
  df$v2 <- data$sex
  df$v3 <- data$ow
  df$v4 <- data$risk
  
  
  # Time-varying treatment
  df$A <- data$Ap
  df$Al1 <- data$A_lag1
  df$Al2 <- data$A_lag2
  
  
  # time-dependent covariate
  df$T1 <- data$L1
  df$T1l1 <- data$L1_lag1
  df$T1l2 <- data$L1_lag2
  
  df$T2 <- data$L2
  df$T2l1 <- data$L2_lag1
  df$T2l2 <- data$L2_lag2
  
  df$T3 <- data$L3
  df$T3l1 <- data$L3_lag1
  df$T3l2 <- data$L3_lag2

  # Mediator
  df$M1 <- data$Mp
  df$M1l1 <- data$M_lag1
  df$M1l2 <- data$M_lag2
  
  # outcomes
  df$Y <- data$Yp
  
  # Time
  df$j <- data$mm
  
  return(df)
}
```

# Process data function

Function này gồm các argument mà user sẽ nhập vào gồm **fix**: time_fixed covariates, **expo**: exposure variable, **med**: mediator variables, **lag**: lag, **outc**: outcome variable, **data**: data

Khi sử dụng function này user sẽ nhập các variables và outcome sẽ trả về theo lag

```{r}
process_data <- function(fix,expo,med,tvar,lag,outc,time,LM = FALSE,data){
  
  ## column names of time-fixed variables
  name_v <- paste0("v",1:length(fix))
  
  out <- data.frame(id = data$id) %>% 
    mutate(data[,fix]) %>% 
    magrittr::set_colnames(c("id",name_v))
  
  ## column names of exposure variables  
  name_e <- paste0("A",1:length(expo))
  
  ## column names of mediator variables  
  name_me <- paste0("M",1:length(med))
  
  ## column names of time-varying variables  
  name_tvar <- paste0("L",1:length(tvar))
  
  
  for (i in 1:lag){
    
    ## column name of lag effect on exposure variable
    co_ex <- paste0(name_e,"l",i)
    co_me <- paste0(name_me,"l",i)
    co_tvar <- paste0(name_tvar,"l",i)
    
    for (k in 1:length(name_e)){
      
      out[,name_e[k]] <- data[,expo[k]]
      name_ep <- {{co_ex}}[k]
      out <- out %>% 
        group_by(id) %>% 
        mutate(
          {{name_ep}} := lag(!!sym(name_e[k]),n=i,default = data[1,expo[k]])
        )
      
    } 
    
    for (k in 1:length(name_me)){
      
      out[,name_me[k]] <- data[,med[k]]
      name_med <- {{co_me}}[k]
      out <- out %>% 
        group_by(id) %>% 
        mutate(
          {{name_med}} := lag(!!sym(name_me[k]),n=i,default = data[1,med[k]])
        ) 
      
    }  
    
    for (k in 1:length(name_tvar)){
      
      out[,name_tvar[k]] <- data[,tvar[k]]
      name_tv <- {{co_tvar}}[k]
      out <- out %>% 
        group_by(id) %>% 
        mutate(
          {{name_tv}} := lag(!!sym(name_tvar[k]),n=i,default = data[1,tvar[k]])
        )
      
    }
    
    
  }
  
  ## outcome variable
  out$Y <- data[,outc]
  
  ## time variable
  out$j <- data[,time]
  
  kq <- list()
  kq$df <- out %>% data.frame() 
  
  ## column name
  
  eps <- kq$df %>% select(starts_with("A")) %>% colnames()
  tf <- kq$df %>% select(starts_with("v")) %>% colnames()
  tva <- kq$df %>% select(starts_with("L")) %>% colnames()
  mediator <- kq$df %>% select(starts_with("M")) %>% colnames()
  outcome <- kq$df %>% select(starts_with("Y")) %>% colnames()
  timee <- kq$df %>% select(starts_with("j")) %>% colnames()
  
  
  ## formula for M(t)
  l_tm1 <- tva[!tva %in% name_tvar]
  m_tm1 <- mediator[!mediator %in% name_me]
  
  if (LM == FALSE){
    formula_mt <- list()
    
    for (i in 1:length(med)){
      formula_mt[i] <- paste(name_me[i],"~",paste(c(eps,m_tm1,l_tm1,tf),collapse = " + "))
    }
    
    kq$fm <- formula_mt
    
    ## formula for L(t)
    formular_lt <- list()
    
    for (i in 1:length(tvar)){
      formular_lt[i] <- paste(name_tvar[i],"~",paste(c(eps,mediator,l_tm1,tf),collapse = " + "))
    }
    
    kq$fl <- formular_lt
    
    ## formula for Y(t)
    formular_y <- paste(outcome,"~",paste(c(eps,mediator,tva,tf),collapse = " + "))
    kq$fy <- formular_y
    
  } else {
    formula_mt <- list()
    
    for (i in 1:length(med)){
      formula_mt[i] <- paste(name_me[i],"~",paste(c(eps,l_tm1,m_tm1,tf),collapse = " + "))
    }
    
    kq$fm <- formula_mt
    
    ## formula for L(t)
    formular_lt <- list()
    
    for (i in 1:length(tvar)){
      formular_lt[i] <- paste(name_tvar[i],"~",paste(c(eps,l_tm1,mediator,tf),collapse = " + "))
    }
    
    kq$fl <- formular_lt
    
    ## formula for Y(t)
    formular_y <- paste(outcome,"~",paste(c(eps,tva,mediator,tf),collapse = " + "))
    kq$fy <- formular_y
  }

  return(kq)
}
```

## Output

```{r}
process_data(
    fix = c("age","sex","ow","risk"),
    expo = c("Ap"),
    med = c("Mp"),
    tvar = c("L1","L2","L3"),
    outc = c("Yp"),
    lag = 2,
    time = c("mm"),
    data = dat0
  )  %>% str()
```

## output LM = TRUE

```{r}
process_data(
  fix = c("age","sex","ow","risk"),
  expo = c("Ap"),
  med = c("Mp"),
  tvar = c("L1","L2","L3"),
  outc = c("Yp"),
  lag = 2,
  time = c("mm"),
  LM = TRUE,
  data = dat0
) %>% str()
```

## Comparison

::: columns
::: {.column width="50%"}
a Long's code

```{r}
dat <- dat0 |> 
    group_by(id) |>
    mutate(
      A_lag1 = lag(Ap, n = 1, default = 0),
      A_lag2 = lag(Ap, n = 2, default = 0),
      M_lag1 = lag(Mp, n = 1, default = 0),
      M_lag2 = lag(Mp, n = 2, default = 0),
      L1_lag1 = lag(L1, n = 1, default = 0),
      L1_lag2 = lag(L1, n = 2, default = 0),
      L2_lag1 = lag(L2, n = 1, default = 100),
      L2_lag2 = lag(L2, n = 2, default = 100),
      L3_lag1 = lag(L3, n = 1, default = 80),
      L3_lag2 = lag(L3, n = 2, default = 80)
    ) |> ungroup() %>% df_prep()

dat %>% head()
```
:::

::: {.column width="50%"}
Function

```{r}
data_pro <- process_data(
    fix = c("age","sex","ow","risk"),
    expo = c("Ap"),
    med = c("Mp"),
    tvar = c("L1","L2","L3"),
    outc = c("Yp"),
    lag = 2,
    time = c("mm"),
    data = dat0
  ) 

data_pro$df %>% head()
```
:::
:::

## Test

```{r}
test_that("process_data function", {
  ## id, v1 - v4
  expect_equal(dat[,c(1:5)],data_pro$df[,c(1:5)])
  
  ## exposure variables
  expect_equal(dat[,c("A")],data_pro$df[,c("A1")])
  expect_equal(dat[,c("Al1")],data_pro$df[,c("A1l1")])
  expect_equal(dat[,c("Al2")],data_pro$df[,c("A1l2")])
  
  ## time-dependent covariate
  expect_equal(dat[,c("T1")],data_pro$df[,c("L1")])
  expect_equal(dat[,c("T2")],data_pro$df[,c("L2")])
  expect_equal(dat[,c("T3")],data_pro$df[,c("L3")])

  ## time-dependent covariate + lag
  expect_equal(dat[,c("T1l1")],data_pro$df[,c("L1l1")])
  expect_equal(dat[,c("T2l1")],data_pro$df[,c("L2l1")])
  expect_equal(dat[,c("T3l1")],data_pro$df[,c("L3l1")])

  expect_equal(dat[,c("T1l2")],data_pro$df[,c("L1l2")])
  expect_equal(dat[,c("T2l2")],data_pro$df[,c("L2l2")])
  expect_equal(dat[,c("T3l2")],data_pro$df[,c("L3l2")])

  ## Mediator
  expect_equal(dat[,c("M1")],data_pro$df[,c("M1")])
  expect_equal(dat[,c("M1l1")],data_pro$df[,c("M1l1")])
  expect_equal(dat[,c("M1l2")],data_pro$df[,c("M1l2")])

  ## outcome and time
  expect_equal(dat[,c("Y","j")],data_pro$df[,c("Y","j")])
  
})
```

# Function to centering and scaling the time-scale variable

```{r}
cen_and_scale <- function(time){
  
  j_out <- list()
  
  jj <- time %>% 
        scale() 
  
  j_out[["jj"]] <- jj %>% as.numeric()
  j_out[["mean_j"]] <- attributes(jj)$`scaled:center`
  j_out[["sd_j"]] <- attributes(jj)$`scaled:scale`
  
  j_out
}
```

::: columns
::: {.column width="50%"}
```{r}
## Assump seed = 0, not doing boostrap

boot <- dat0 |> 
  group_by(id) |>
  mutate(
    A_lag1 = lag(Ap, n = 1, default = 0),
    A_lag2 = lag(Ap, n = 2, default = 0),
    M_lag1 = lag(Mp, n = 1, default = 0),
    M_lag2 = lag(Mp, n = 2, default = 0),
    L1_lag1 = lag(L1, n = 1, default = 0),
    L1_lag2 = lag(L1, n = 2, default = 0),
    L2_lag1 = lag(L2, n = 1, default = 100),
    L2_lag2 = lag(L2, n = 2, default = 100),
    L3_lag1 = lag(L3, n = 1, default = 80),
    L3_lag2 = lag(L3, n = 2, default = 80)
  ) |> ungroup() %>% df_prep()

boot$jj <- scale(boot$j)
mean_j <- attributes(boot$jj)$`scaled:center`
sd_j <- attributes(boot$jj)$`scaled:scale`
boot$jj <- as.numeric(boot$jj)

```
:::

::: {.column width="50%"}
```{r}
boot2 <- cen_and_scale(data_pro$df$j)
```
:::
:::

### Test

```{r}
test_that("cen and scale function", {
  expect_equal(boot$jj,boot2$jj)
  expect_equal(mean_j,boot2$mean_j)
  expect_equal(sd_j,boot2$sd_j)
})
```

# fitg function

```{r}
## resamp function

resamp <- function(data,seed = 0){
  df <- data
  
  set.seed(seed)
  cat("Running SEED", seed, "\n")
  # cat("\n")
  # cat("Resampling Data", "\n")
  
  clusters <- names(table(df$id))
  index <- sample(1:length(clusters), length(clusters), replace = TRUE)
  bb <- table(clusters[index])
  boot <- NULL
  
  if(seed == 0) {
    # not doing bootstrap
    boot <- df 
  } else {
    for(zzz in 1:max(bb)) {
      # Loop over repeated id
      cc <- df[df$id %in% names(bb[bb %in% c(zzz:max(bb))]), ]
      cc$bid <- paste0(cc$id, zzz)
      boot <- rbind(boot, cc)
    }
  }

  boot$jj <- cen_and_scale(boot$j)$jj
  
  boot
}
```

```{r}
fitg <- function(data, seed = 0,
                 mreg = "binomial",
                 lreg = c("binomial","gaussian","gaussian"),
                 yreg = "binomial",dof = 3){
  set.seed(seed)
  res_df <- resamp(data = data$df,seed = seed)
  
  fitR <- list()
  
  fitR$df <- res_df %>% as_tibble()

  #----- fit parametric models for
  #--- Mediator models
  
  if(length(mreg) != length(data$fm)){
    stop("the defined regression of M is not equal")
  }
  
  for (i in 1:length(data$fm)){
    fitM <- paste0(data$fm[[i]],"+","bs(jj,df=",dof,")")
    fitR$M[[i]] <- glm(fitM ,family = mreg[i], data = res_df) 
  }
  
  
  #--- Covariate models
  if(length(lreg) != length(data$fl)){
    stop("the defined regression of L is not equal")
  }
  
  for (i in 1:length(data$fl)){
    fitL <- paste0(data$fl[[i]],"+","bs(jj,df=",dof,")")
    fitR$L[[i]] <- glm(fitL ,family = lreg[i], data = res_df) 
  }
  
  #--- Outcome model: 
  fitY <- paste0(data$fy,"+","bs(jj,df=",dof,")")
  
  
  fitR$Y <-  glm(fitY ,family = yreg, data = res_df) 
  
  fitR
}
```

## Output

```{r}
process_data(
  fix = c("age","sex","ow","risk"),
  expo = c("Ap"),
  med = c("Mp"),
  tvar = c("L1","L2","L3"),
  outc = c("Yp"),
  lag = 2,
  time = c("mm"),
  data = dat0
) %>% fitg(mreg = "binomial",
           lreg = c("binomial","gaussian","gaussian"),
           yreg = "binomial",dof = 3)
```

## Compare

::: columns
::: {.column width="50%"}
```{r}
## seed = 0
df <- dat0 |> 
  group_by(id) |>
  mutate(
    A_lag1 = lag(Ap, n = 1, default = 0),
    A_lag2 = lag(Ap, n = 2, default = 0),
    M_lag1 = lag(Mp, n = 1, default = 0),
    M_lag2 = lag(Mp, n = 2, default = 0),
    L1_lag1 = lag(L1, n = 1, default = 0),
    L1_lag2 = lag(L1, n = 2, default = 0),
    L2_lag1 = lag(L2, n = 1, default = 100),
    L2_lag2 = lag(L2, n = 2, default = 100),
    L3_lag1 = lag(L3, n = 1, default = 80),
    L3_lag2 = lag(L3, n = 2, default = 80)
  ) |> ungroup() %>% df_prep()

boot <- df

boot$jj <- scale(boot$j)
mean_j <- attributes(boot$jj)$`scaled:center`
sd_j <- attributes(boot$jj)$`scaled:scale`
boot$jj <- as.numeric(boot$jj)

#----- fit parametric models for
#--- Mediator models

mM1 <- function(k){
  fitM1 <- glm(M1 ~ A + Al1 + Al2 + M1l1 + M1l2 + T1l1 + T1l2 + T2l1 + T2l2 + T3l1 + T3l2 + 
                 v1 + v2 + v3 + v4 + splines::bs(jj, df = 3), 
               family = binomial, data = boot)
  return(fitM1)
}

# PseudoR2(fitM1)
#--- Covariate models

mT1 <- function(k){
  fitT1 <- glm(T1 ~ A + Al1 + Al2 + M1 + M1l1 + M1l2 + T1l1 + T1l2 + T2l1 + T2l2 + T3l1 + T3l2 + 
                 v1 + v2 + v3 + v4 + splines::bs(jj, df = 3), 
               family = binomial, data = boot)
  return(fitT1)
}

# PseudoR2(fitT1)

mT2 <- function(k){
  fitT2 <- lm(T2 ~ A + Al1 + Al2 + M1 + M1l1 + M1l2 + T1l1 + T1l2 + T2l1 + T2l2 + T3l1 + T3l2 + 
                v1 + v2 + v3 + v4 + splines::bs(jj, df = 3), data = boot)
  return(fitT2)
}

mT3 <- function(k){
  fitT3 <- lm(T3 ~ A + Al1 + Al2 + M1 + M1l1 + M1l2 + T1l1 + T1l2 + T2l1 + T2l2 + T3l1 + T3l2 + 
                v1 + v2 + v3 + v4 + splines::bs(jj, df = 3), data = boot)
  return(fitT3)
}

# Outcome model: E(Y|a, m, l, v)

mY <- function(k) {
  fitY <- glm(Y ~ A + Al1 + Al2 + M1 + M1l1 + M1l2 + T1 + T1l1 + T1l2 + T2 + T2l1 + T2l2 + 
                T3 + T3l1 + T3l2 +  v1 + v2 + v3 + v4 + splines::bs(jj, df = 3), 
              family = binomial, data = boot)
  return(fitY)
}

# PseudoR2(fitY)

# Fit all models and save in a list
mR <- c(mM1, mY, mT1, mT2, mT3)
fitR <- lapply(1:5,function(x) mR[[x]](k))
```
:::

::: {.column width="50%"}
```{r}
fitR2 <- process_data(
  fix = c("age","sex","ow","risk"),
  expo = c("Ap"),
  med = c("Mp"),
  tvar = c("L1","L2","L3"),
  outc = c("Yp"),
  lag = 2,
  time = c("mm"),
  data = dat0
) %>% fitg(mreg = "binomial",
           lreg = c("binomial","gaussian","gaussian"),
           yreg = "binomial",dof = 3,seed = 0) 
```
:::
:::

## Test

```{r}
test_that("fitg function", {

  ## model M(t)
  expect_equal(min(fitR[[1]]$fitted.values),min(fitR2$M[[1]]$fitted.values))
  expect_equal(max(fitR[[1]]$fitted.values),max(fitR2$M[[1]]$fitted.values))
  expect_equal(mean(fitR[[1]]$fitted.values),mean(fitR2$M[[1]]$fitted.values))
  expect_equal(sd(fitR[[1]]$fitted.values),sd(fitR2$M[[1]]$fitted.values))

  ## model Y
  expect_equal(min(fitR[[2]]$fitted.values),min(fitR2$Y$fitted.values))
  expect_equal(max(fitR[[2]]$fitted.values),max(fitR2$Y$fitted.values))
  expect_equal(mean(fitR[[2]]$fitted.values),mean(fitR2$Y$fitted.values))
  expect_equal(sd(fitR[[2]]$fitted.values),sd(fitR2$Y$fitted.values))
  
  ## model L1
  expect_equal(min(fitR[[3]]$fitted.values),min(fitR2$L[[1]]$fitted.values))
  expect_equal(max(fitR[[3]]$fitted.values),max(fitR2$L[[1]]$fitted.values))
  expect_equal(mean(fitR[[3]]$fitted.values),mean(fitR2$L[[1]]$fitted.values))
  expect_equal(sd(fitR[[3]]$fitted.values),sd(fitR2$L[[1]]$fitted.values))
  
  ## model L2
  expect_equal(min(fitR[[4]]$fitted.values),min(fitR2$L[[2]]$fitted.values))
  expect_equal(max(fitR[[4]]$fitted.values),max(fitR2$L[[2]]$fitted.values))
  expect_equal(mean(fitR[[4]]$fitted.values),mean(fitR2$L[[2]]$fitted.values))
  expect_equal(sd(fitR[[4]]$fitted.values),sd(fitR2$L[[2]]$fitted.values))
  
  ## model L3
  expect_equal(min(fitR[[5]]$fitted.values),min(fitR2$L[[3]]$fitted.values))
  expect_equal(max(fitR[[5]]$fitted.values),max(fitR2$L[[3]]$fitted.values))
  expect_equal(mean(fitR[[5]]$fitted.values),mean(fitR2$L[[3]]$fitted.values))
  expect_equal(sd(fitR[[5]]$fitted.values),sd(fitR2$L[[3]]$fitted.values))
})
```

# boot_g function

em tách thành 1 function để khi chạy 1:iter, không bị replicate lại khúc lấy boostrap, để đỡ tốn tg

```{r}
boot_g <- function(data,n_boot = 10000,repdf = 1){
  
  boot <- data$df
  # Select baseline visit
  df0 <- boot[boot$j==1, ]
  
  df0$idn <- 1:nrow(df0)
  
  MC <- NULL
  
  if (n_boot == 0) {
    MC <- do.call(rbind, replicate(repdf, df0, simplify = FALSE))
    MC$idsim <- 1:nrow(MC)
    
  } else {
    samples <- sample(df0$idn, size = n_boot, replace = T)
    bb <- table(samples)
    
    for(zzz in 1:max(bb)) {
      cc <- df0[df0$idn %in% names(bb[bb %in% c(zzz:max(bb))]), ]
      cc$bid <- paste0(cc$idn, zzz)
      MC <- rbind(MC, cc)
    }
    
    MC$idsim <- 1:n_boot
  }
  
  data$res_df <- MC %>% as_tibble()
  data
}
```

## Output

```{r}
process_data(
  fix = c("age","sex","ow","risk"),
  expo = c("Ap"),
  med = c("Mp"),
  tvar = c("L1","L2","L3"),
  outc = c("Yp"),
  lag = 2,
  time = c("mm"),
  data = dat0
) %>% fitg(mreg = "binomial",
           lreg = c("binomial","gaussian","gaussian"),
           yreg = "binomial",dof = 3,seed = 0) %>% 
  boot_g(n_boot = 0,repdf = 1) 
```

## Compare

::: columns
::: {.column width="50%"}
```{r}
seed = 0 
set.seed(0)
montecarlo = 0
repdf = 1

df <- dat0 |> 
  group_by(id) |>
  mutate(
    A_lag1 = lag(Ap, n = 1, default = 0),
    A_lag2 = lag(Ap, n = 2, default = 0),
    M_lag1 = lag(Mp, n = 1, default = 0),
    M_lag2 = lag(Mp, n = 2, default = 0),
    L1_lag1 = lag(L1, n = 1, default = 0),
    L1_lag2 = lag(L1, n = 2, default = 0),
    L2_lag1 = lag(L2, n = 1, default = 100),
    L2_lag2 = lag(L2, n = 2, default = 100),
    L3_lag1 = lag(L3, n = 1, default = 80),
    L3_lag2 = lag(L3, n = 2, default = 80)
  ) |> ungroup() %>% df_prep()

# Resampling based on id and store in `boot` dataset
  clusters <- names(table(df$id))
  index <- sample(1:length(clusters), length(clusters), replace = TRUE)
  bb <- table(clusters[index])
  boot <- NULL
  
  if(seed == 0) {
    # not doing bootstrap
    boot <- df 
  } else {
    for(zzz in 1:max(bb)) {
      # Loop over repeated id
      cc <- df[df$id %in% names(bb[bb %in% c(zzz:max(bb))]), ]
      cc$bid <- paste0(cc$id, zzz)
      boot <- rbind(boot, cc)
    }
  }
  
  # Select baseline visit
  df0 <- boot[boot$j==1, ]
  
  df0$idn <- 1:nrow(df0)
  
  MC <- NULL
  
  if (montecarlo == 0) {
    MC <- do.call(rbind, replicate(repdf, df0, simplify = FALSE))
    MC$idsim <- 1:nrow(MC)
    
  } else {
    samples <- sample(df0$idn, size = montecarlo, replace = T)
    bb <- table(samples)
    
    for(zzz in 1:max(bb)) {
      cc <- df0[df0$idn %in% names(bb[bb %in% c(zzz:max(bb))]), ]
      cc$bid <- paste0(cc$idn, zzz)
      MC <- rbind(MC, cc)
    }
    
    MC$idsim <- 1:montecarlo
  }
  
MC <- MC %>% as_tibble()
MC
```
:::

::: {.column width="50%"}
```{r}
fitR2 <- process_data(
  fix = c("age","sex","ow","risk"),
  expo = c("Ap"),
  med = c("Mp"),
  tvar = c("L1","L2","L3"),
  outc = c("Yp"),
  lag = 2,
  time = c("mm"),
  data = dat0
) %>% fitg(mreg = "binomial",
           lreg = c("binomial","gaussian","gaussian"),
           yreg = "binomial",dof = 3,seed = 0) %>% 
  boot_g(n_boot = 0,repdf = 1) 

fitR2$res_df
```
:::
:::

## Test

```{r}
along_redf <- MC %>% as.data.frame()
test_redf <- fitR2$res_df %>% as.data.frame()

test_that("bootg function", {

  # id, v1 - v4
  expect_equal(along_redf[,c(1:5)],test_redf[,c(1:5)])
  
  # exposure variables
  expect_equal(along_redf[,c("A")],test_redf[,c("A1")])
  expect_equal(along_redf[,c("Al1")],test_redf[,c("A1l1")])
  expect_equal(along_redf[,c("Al2")],test_redf[,c("A1l2")])

  ## time-dependent covariate
  expect_equal(along_redf[,c("T1")],test_redf[,c("L1")])
  expect_equal(along_redf[,c("T2")],test_redf[,c("L2")])
  expect_equal(along_redf[,c("T3")],test_redf[,c("L3")])

  ## time-dependent covariate + lag
  expect_equal(along_redf[,c("T1l1")],test_redf[,c("L1l1")])
  expect_equal(along_redf[,c("T2l1")],test_redf[,c("L2l1")])
  expect_equal(along_redf[,c("T3l1")],test_redf[,c("L3l1")])

  expect_equal(along_redf[,c("T1l2")],test_redf[,c("L1l2")])
  expect_equal(along_redf[,c("T2l2")],test_redf[,c("L2l2")])
  expect_equal(along_redf[,c("T3l2")],test_redf[,c("L3l2")])

  ## Mediator
  expect_equal(along_redf[,c("M1")],test_redf[,c("M1")])
  expect_equal(along_redf[,c("M1l1")],test_redf[,c("M1l1")])
  expect_equal(along_redf[,c("M1l2")],test_redf[,c("M1l2")])

  ## outcome and time
  expect_equal(along_redf[,c("Y","j")],test_redf[,c("Y","j")])
})
```

## seed not equal 0 and bootstraping

::: columns
::: {.column width="50%"}
```{r}
seed = 123 
set.seed(seed)
montecarlo = 100
repdf = 1

df <- dat0 |> 
  group_by(id) |>
  mutate(
    A_lag1 = lag(Ap, n = 1, default = 0),
    A_lag2 = lag(Ap, n = 2, default = 0),
    M_lag1 = lag(Mp, n = 1, default = 0),
    M_lag2 = lag(Mp, n = 2, default = 0),
    L1_lag1 = lag(L1, n = 1, default = 0),
    L1_lag2 = lag(L1, n = 2, default = 0),
    L2_lag1 = lag(L2, n = 1, default = 100),
    L2_lag2 = lag(L2, n = 2, default = 100),
    L3_lag1 = lag(L3, n = 1, default = 80),
    L3_lag2 = lag(L3, n = 2, default = 80)
  ) |> ungroup() %>% df_prep()

# Resampling based on id and store in `boot` dataset
  clusters <- names(table(df$id))
  index <- sample(1:length(clusters), length(clusters), replace = TRUE)
  bb <- table(clusters[index])
  boot <- NULL
  
  if(seed == 0) {
    # not doing bootstrap
    boot <- df 
  } else {
    for(zzz in 1:max(bb)) {
      # Loop over repeated id
      cc <- df[df$id %in% names(bb[bb %in% c(zzz:max(bb))]), ]
      cc$bid <- paste0(cc$id, zzz)
      boot <- rbind(boot, cc)
    }
  }
  
  # Select baseline visit
  df0 <- boot[boot$j==1, ]
  
  df0$idn <- 1:nrow(df0)
  
  MC <- NULL
  
  if (montecarlo == 0) {
    MC <- do.call(rbind, replicate(repdf, df0, simplify = FALSE))
    MC$idsim <- 1:nrow(MC)
    
  } else {
    samples <- sample(df0$idn, size = montecarlo, replace = T)
    bb <- table(samples)
    
    for(zzz in 1:max(bb)) {
      cc <- df0[df0$idn %in% names(bb[bb %in% c(zzz:max(bb))]), ]
      cc$bid <- paste0(cc$idn, zzz)
      MC <- rbind(MC, cc)
    }
    
    MC$idsim <- 1:montecarlo
  }
  
MC <- MC %>% as_tibble()
MC
```
:::

::: {.column width="50%"}
```{r}
# set.seed(123)
fitR2 <- process_data(
  fix = c("age","sex","ow","risk"),
  expo = c("Ap"),
  med = c("Mp"),
  tvar = c("L1","L2","L3"),
  outc = c("Yp"),
  lag = 2,
  time = c("mm"),
  data = dat0
) %>% fitg(mreg = "binomial",
           lreg = c("binomial","gaussian","gaussian"),
           yreg = "binomial",dof = 3,seed = 123) %>% 
  boot_g(n_boot = 100,repdf = 1) 

fitR2$res_df
```
:::
:::

## Test

```{r}
along_redf <- MC %>% as.data.frame()
test_redf <- fitR2$res_df %>% as.data.frame()

test_that("bootg function", {

  # id, v1 - v4
  expect_equal(along_redf[,c(1:5)],test_redf[,c(1:5)])
  
  # exposure variables
  expect_equal(along_redf[,c("A")],test_redf[,c("A1")])
  expect_equal(along_redf[,c("Al1")],test_redf[,c("A1l1")])
  expect_equal(along_redf[,c("Al2")],test_redf[,c("A1l2")])

  ## time-dependent covariate
  expect_equal(along_redf[,c("T1")],test_redf[,c("L1")])
  expect_equal(along_redf[,c("T2")],test_redf[,c("L2")])
  expect_equal(along_redf[,c("T3")],test_redf[,c("L3")])

  ## time-dependent covariate + lag
  expect_equal(along_redf[,c("T1l1")],test_redf[,c("L1l1")])
  expect_equal(along_redf[,c("T2l1")],test_redf[,c("L2l1")])
  expect_equal(along_redf[,c("T3l1")],test_redf[,c("L3l1")])

  expect_equal(along_redf[,c("T1l2")],test_redf[,c("L1l2")])
  expect_equal(along_redf[,c("T2l2")],test_redf[,c("L2l2")])
  expect_equal(along_redf[,c("T3l2")],test_redf[,c("L3l2")])

  ## Mediator
  expect_equal(along_redf[,c("M1")],test_redf[,c("M1")])
  expect_equal(along_redf[,c("M1l1")],test_redf[,c("M1l1")])
  expect_equal(along_redf[,c("M1l2")],test_redf[,c("M1l2")])

  ## outcome and time
  expect_equal(along_redf[,c("Y","j")],test_redf[,c("Y","j")])
})
```

# g_form function

```{r}
g_form <- function(data, ii = 2, length = 12, am = 1, ay = 0){
  
  dddd <- data$res_df %>% data.frame()
  
  lagg <- dddd %>% dplyr::select(contains("L1l")) %>% ncol() 
  
  d2 <- dddd[dddd$idsim==ii, ]
  
  id <- d2$idsim
  id_ori <- d2$id
  
  length <- length
  
  # Baseline covariates
  Vp <- d2 %>% select(starts_with("v"))
  
  Yp <- mm <- numeric()
  
  mm[1:lagg-1] <- j <- 1
  
  Yp[1:lagg-1] <- 0
  
  timee <- cen_and_scale(data$df$j)
  
  # mediator
  Mp <- matrix(ncol = length(data$M)) %>% data.frame()
  names(Mp) <- paste0("M",1:length(data$M))
  Mp[1:lagg-1,] <- d2 %>% select(names(Mp)) 
  
  
  # time-varying covariates (contribute to mediator models)
  Lmp <- matrix(ncol = length(data$L)) %>% data.frame()
  names(Lmp) <- paste0("L",1:length(data$L))
  Lmp[1:lagg-1,] <- d2 %>% select(names(Lmp)) 
  # time-varying covariates (contribute to outcome models)
  Lp <- Lmp
  
  
  for (l in lagg:length) {
    
    if (Yp[l-1]==1) {
      break
    } else{
      
      # Predict mediator
      var_fm <- attr(data$M[[1]]$terms, "term.labels")
      var_fm <- var_fm[-length(var_fm)] 
      
      dfMp <- d2 %>% select(matches(var_fm)) %>% 
        mutate(jj = (l-timee$mean_j)/timee$sd_j)
      
      dfMp[startsWith(colnames(dfMp), "A")] <- am
      
      
      if (l > lagg){
        
        for (zz in 1:(lagg)){
          term <- paste0("l",zz)
          # L lag
          dfMp[startsWith(colnames(dfMp), "L") & endsWith(colnames(dfMp), term)] <- Lmp[l-zz,]
          # M lag
          dfMp[startsWith(colnames(dfMp), "M") & endsWith(colnames(dfMp), term)] <- Mp[l-zz,]
        }
        
      }
      
      
      for (x in 1:length(data$M)){
        M_reg <- data$M[[x]]$family$family
        
        if (Mp[l-1,x] == 0) {
          Mp[l,x] <- case_when(
            M_reg  == "binomial" ~ pFunc(data$M[[x]], dfMp),
            M_reg  == "gaussian" ~ predict(data$M[[x]], dfMp)
          )
        } else {
          Mp[l,x] <- 1
        }
        
      }
      
      # Predict time-varying covariates (contribute to mediator models)
      # L
      var_fl <- attr(data$L[[1]]$terms, "term.labels")
      var_fl <- var_fl[-length(var_fl)] 
      dfLmp <- d2 %>% select(matches(var_fl)) %>% 
        mutate(jj = (l-timee$mean_j)/timee$sd_j)
      dfLmp[startsWith(colnames(dfLmp), "A")] <- am
      dfLmp[colnames(dfLmp) == colnames(Mp)] <- Mp[l,]
      
      
      if (l > lagg){
        
        for (zz in 1:lagg){
          term <- paste0("l",zz)
          # L lag
          dfLmp[startsWith(colnames(dfLmp), "L") & endsWith(colnames(dfLmp), term)] <- Lmp[l-zz,]
          # M lag
          dfLmp[startsWith(colnames(dfLmp), "M") & endsWith(colnames(dfLmp), term)] <- Mp[l-zz,]
        }
        
      }
      
      for (x in 1:length(data$L)){
        
        L_reg <- data$L[[x]]$family$family
        
        Lmp[l,x] <- case_when(
          L_reg  == "binomial" ~ pFunc(data$L[[x]], dfLmp),
          L_reg  == "gaussian" ~ predict(data$L[[x]], dfLmp)
        )
      }
      
      
      # Predict time-varying covariates (contribute to outcome models, if ay != am)
      if (ay != am) {
        dfLp <- d2 %>% select(matches(var_fl)) %>% 
          mutate(jj = (l-timee$mean_j)/timee$sd_j)
        dfLp[startsWith(colnames(dfLp), "A")] <- ay
        dfLp[colnames(dfLp) == colnames(Mp)] <- Mp[l,]
        
        if (l > lagg){
          
          for (zz in 1:lagg){
            term <- paste0("l",zz)
            # L lag
            dfLp[startsWith(colnames(dfLp), "L") & endsWith(colnames(dfLp), term)] <- Lp[l-zz,]
            # M lag
            dfLp[startsWith(colnames(dfLp), "M") & endsWith(colnames(dfLp), term)] <- Mp[l-zz,]
          }
          
        }
        
        
        for (x in 1:length(data$L)){
          
          L_reg <- data$L[[x]]$family$family
          
          Lp[l,x] <- case_when(
            L_reg  == "binomial" ~ pFunc(data$L[[x]], dfLp),
            L_reg  == "gaussian" ~ predict(data$L[[x]], dfLp)
          )
        }
        
      } else{
        Lp <- Lmp
      }
      
      # Y
      var_y <- attr(data$Y$terms, "term.labels")
      var_y <- var_y[-length(var_y)] 
      dfYp <- d2 %>% select(matches(var_y)) %>% 
        mutate(jj = (l-timee$mean_j)/timee$sd_j)
      dfYp[startsWith(colnames(dfYp), "A")] <- ay
      dfYp[colnames(dfYp) %in% colnames(Mp)] <- Mp[l,]
      dfYp[colnames(dfYp) %in% colnames(Lp)] <- Lp[l,] 
      
      if (l > lagg){
        
        for (zz in 1:lagg){
          term <- paste0("l",zz)
          # L lag
          dfYp[startsWith(colnames(dfYp), "L") & endsWith(colnames(dfYp), term)] <- Lp[l-zz,]
          # M lag
          dfYp[startsWith(colnames(dfYp), "M") & endsWith(colnames(dfYp), term)] <- Mp[l-zz,]
        }
        
      }
      
      Yp[l] <- pFunc(data$Y, dfYp)
      
    }
    
    colnames(Lmp) <- paste0("Lmp",1:length(data$L))
    colnames(Lp) <- paste0("Lp",1:length(data$L))
    
    mm[l] <- l
  }
  boot_num <- seed
  gdat <- data.frame(boot_num,id, id_ori, mm, Ay = ay, Am = am, Mp, Yp,
                     Lmp, Lp, Vp)
  gdat$lastid <- as.numeric(!duplicated(gdat$id, fromLast = T))
  return(gdat)
}
```

## Output

```{r}
pFunc <- function(mod, ndat) {
  as.numeric(predict(mod, newdata = ndat, type = "response") > runif(1))
}
  
rFunc <- function(mod, ndat) {
  pred_prob <- predict(mod, newdata = ndat, type = "response")
  return(rbinom(1, size = 1, prob = pred_prob))
}
```

```{r}
process_data(
  fix = c("age","sex","ow","risk"),
  expo = c("Ap"),
  med = c("Mp"),
  tvar = c("L1","L2","L3"),
  outc = c("Yp"),
  lag = 2,
  time = c("mm"),
  data = dat0
) %>% fitg(mreg = "binomial",
           lreg = c("binomial","gaussian","gaussian"),
           yreg = "binomial",dof = 3,seed = 0) %>% 
  boot_g(n_boot = 0,repdf = 1) %>% 
  g_form(ii = 1, length = 12, ay = 1, am = 1)
```

## Compare

a Long code

```{r}
gform <- function(ii, pgdat, length, am, ay) {
  
  pFunc <- function(mod, ndat) {
    as.numeric(predict(mod, newdata = ndat, type = "response") > runif(1))
  }
  
  rFunc <- function(mod, ndat) {
    pred_prob <- predict(mod, newdata = ndat, type = "response")
    return(rbinom(1, size = 1, prob = pred_prob))
  }
  
  d <- pgdat
  d <- d[d$idsim==ii, ]
  
  id <- d$idsim
  id_ori <- d$id
  
  length <- length
  
  
  cat("...", paste0(ii, "(", id_ori, ")"))
  
  
  
  # Baseline covariates
  Vp <- d[, c("v1", "v2", "v3", "v4")]
  
  T1p <- T2p <- T3p  <- M1p <- Yp <- mm <- numeric()
  T1mp <- T2mp <- T3mp <- numeric()
  
  mm[1] <- j <- 1
  
  
  M1p[1] <- 0
  Yp[1] <- 0
  
  # Time-varying covariates contribute to outcome model
  T1p[1] <- d$T1
  T2p[1] <- d$T2
  T3p[1] <- d$T3
  
  # Time-varying covariates contribute to mediator model
  T1mp[1] <- d$T1
  T2mp[1] <- d$T2
  T3mp[1] <- d$T3
  
  
  for (l in 2:length) {
    
    if (Yp[l-1]==0) {
      
      if (l == 2) {
        T1l2 <- T1p[1]
        T2l2 <- T2p[1]
        T3l2 <- T3p[1]
        
        T1ml2 <- T1mp[1]
        T2ml2 <- T2mp[1]
        T3ml2 <- T3mp[1]
        M1l2 <- M1p[1]
        
      } else {
        
        T1l2 <- T1p[l-2]
        T2l2 <- T2p[l-2]
        T3l2 <- T3p[l-2]
        T1ml2 <- T1mp[l-2]
        T2ml2 <- T2mp[l-2]
        T3ml2 <- T3mp[l-2]
        M1l2 <- M1p[l-2]
        
      }
      
      T1l1 <- T1p[l-1]
      T2l1 <- T2p[l-1]
      T3l1 <- T3p[l-1]
      T1ml1 <- T1mp[l-1]
      T2ml1 <- T2mp[l-1]
      T3ml1 <- T3mp[l-1]
      
      M1l1 <- M1p[l-1]
      
      
      
      # Predict mediator
      dM1p <- data.frame(Vp, A = am, Al1 = am, Al2 = am, M1l1, M1l2, T1l1 = T1ml1, T1l2 = T1ml2, 
                         T2l1 = T2ml1, T2l2 = T2ml2, T3l1 = T3ml1, T3l2 = T3ml2,
                         jj = as.numeric((l-mean_j)/sd_j))
      
      if (M1p[l - 1] == 0) {
        # M1p[l] <- pFunc(fitR[[1]], dM1p)
        M1p[l] <- rFunc(fitR[[1]], dM1p)
      } else {
        M1p[l] <- 1
      }
      
      
      
      # Predict time-varying covariates (contribute to mediator models)
      # T1
      dT1mp <- data.frame(Vp, A = am, Al1 = am, Al2 = am, 
                          M1 = M1p[l], M1l1, M1l2, 
                          T1l1 = T1ml1, T1l2 = T1ml2, 
                          T2l1 = T2ml1, T2l2 = T2ml2, 
                          T3l1 = T3ml1,T3l2 = T3ml2,
                          jj = as.numeric((l-mean_j)/sd_j))
      T1mp[l] <- pFunc(fitR[[3]], dT1mp)
      
      # T2
      dT2mp <- data.frame(Vp, A = am, Al1 = am, Al2 = am, 
                          M1 = M1p[l], M1l1, M1l2, 
                          T1l1 = T1ml1, T1l2 = T1ml2, 
                          T2l1 = T2ml1, T2l2 = T2ml2, 
                          T3l1 = T3ml1, T3l2 = T3ml2,
                          jj = as.numeric((l-mean_j)/sd_j))
      T2mp[l] <- predict(fitR[[4]], dT2mp)
      
      # T3
      dT3mp <- data.frame(Vp, A = am, Al1 = am, Al2 = am, 
                          M1 = M1p[l], M1l1, M1l2,
                          T1l1 = T1ml1, T1l2 = T1ml2, 
                          T2l1 = T2ml1, T2l2 = T2ml2, 
                          T3l1 = T3ml1, T3l2 = T3ml2,
                          jj = as.numeric((l-mean_j)/sd_j))
      T3mp[l] <- predict(fitR[[5]], dT3mp)
      
      
      # Predict time-varying covariates (contribute to outcome models, if ay != am)
      # If ay = am ==> simply covariates take the same values between two models
      
      if (ay != am) {
        # T1
        dT1p <- data.frame(Vp, A = ay, Al1 = ay, Al2 = ay, 
                           M1 = M1p[l], M1l1, M1l2, 
                           T1l1, T1l2, 
                           T2l1, T2l2,  
                           T3l1, T3l2, 
                           jj = as.numeric((l-mean_j)/sd_j))
        T1p[l] <- pFunc(fitR[[3]], dT1p)
        
        # T2
        dT2p <- data.frame(Vp, A = ay, Al1 = ay, Al2 = ay, 
                           M1 = M1p[l], M1l1, M1l2, 
                           T1l1, T1l2, 
                           T2l1, T2l2,  
                           T3l1, T3l2, 
                           jj = as.numeric((l-mean_j)/sd_j))
        T2p[l] <- predict(fitR[[4]], dT2p)
        
        # T3
        dT3p <- data.frame(Vp, A = ay, Al1 = ay, Al2 = ay, 
                           M1 = M1p[l], M1l1, M1l2, 
                           T1l1, T1l2, 
                           T2l1, T2l2,  
                           T3l1, T3l2, 
                           jj = as.numeric((l-mean_j)/sd_j))
        T3p[l] <- predict(fitR[[5]], dT3p)
        
        
        
      } else {
        T1p[l] <- T1mp[l]
        T2p[l] <- T2mp[l]
        T3p[l] <- T3mp[l]
      }
      
      # Y
      dYp <- data.frame(Vp, A = ay, Al1 = ay, Al2 = ay, M1 = M1p[l], M1l1, M1l2, 
                        T1 = T1p[l], T1l1, T1l2, 
                        T2 = T2p[l], T2l1, T2l2,
                        T3 = T3p[l], T3l1, T3l2, 
                        jj = as.numeric((l-mean_j)/sd_j))
      Yp[l] <- pFunc(fitR[[2]], dYp)
      
    } else {
      break
    }
    
    mm[l] <- l
    
  }
  
  
  boot_num <- seed
  gdat <- data.frame(boot_num, id, id_ori, mm, Ay = ay, Am = am, M1p, Yp,
                     T1mp, T1p, T2mp, T2p, T3mp, T3p, Vp)
  gdat$lastid <- as.numeric(!duplicated(gdat$id, fromLast = T))
  return(gdat)
}



```

::: columns
::: {.column width="50%"}
```{r}
seed = 0 
set.seed(seed)
montecarlo = 0
repdf = 1

df <- dat0 |> 
  group_by(id) |>
  mutate(
    A_lag1 = lag(Ap, n = 1, default = 0),
    A_lag2 = lag(Ap, n = 2, default = 0),
    M_lag1 = lag(Mp, n = 1, default = 0),
    M_lag2 = lag(Mp, n = 2, default = 0),
    L1_lag1 = lag(L1, n = 1, default = 0),
    L1_lag2 = lag(L1, n = 2, default = 0),
    L2_lag1 = lag(L2, n = 1, default = 100),
    L2_lag2 = lag(L2, n = 2, default = 100),
    L3_lag1 = lag(L3, n = 1, default = 80),
    L3_lag2 = lag(L3, n = 2, default = 80)
  ) |> ungroup() %>% df_prep()

# Resampling based on id and store in `boot` dataset
  clusters <- names(table(df$id))
  index <- sample(1:length(clusters), length(clusters), replace = TRUE)
  bb <- table(clusters[index])
  boot <- NULL
  
  if(seed == 0) {
    # not doing bootstrap
    boot <- df 
  } else {
    for(zzz in 1:max(bb)) {
      # Loop over repeated id
      cc <- df[df$id %in% names(bb[bb %in% c(zzz:max(bb))]), ]
      cc$bid <- paste0(cc$id, zzz)
      boot <- rbind(boot, cc)
    }
  }
  
  # Select baseline visit
  df0 <- boot[boot$j==1, ]
  
  df0$idn <- 1:nrow(df0)
  
  MC <- NULL
  
  if (montecarlo == 0) {
    MC <- do.call(rbind, replicate(repdf, df0, simplify = FALSE))
    MC$idsim <- 1:nrow(MC)
    
  } else {
    samples <- sample(df0$idn, size = montecarlo, replace = T)
    bb <- table(samples)
    
    for(zzz in 1:max(bb)) {
      cc <- df0[df0$idn %in% names(bb[bb %in% c(zzz:max(bb))]), ]
      cc$bid <- paste0(cc$idn, zzz)
      MC <- rbind(MC, cc)
    }
    
    MC$idsim <- 1:montecarlo
  }
  
gform(ii = 1, pgdat = MC, length = 12, ay = 1, am = 1) %>% as_tibble()
```
:::

::: {.column width="50%"}
```{r}
process_data(
  fix = c("age","sex","ow","risk"),
  expo = c("Ap"),
  med = c("Mp"),
  tvar = c("L1","L2","L3"),
  outc = c("Yp"),
  lag = 2,
  time = c("mm"),
  data = dat0
) %>% fitg(mreg = c("binomial"),
           lreg = c("binomial","gaussian","gaussian"),
           yreg = "binomial",dof = 3,seed = 0) %>% 
  boot_g(n_boot = 0,repdf = 1) %>% 
  g_form(ii = 1, length = 12, ay = 1, am = 1) %>% as_tibble()
```
:::
:::

## Test AM = 1, AY = 1

```{r}
along_redf <- gform(ii = 1, pgdat = MC, length = 12, ay = 1, am = 1) %>% 
  as.data.frame()

test_redf <- process_data(
  fix = c("age","sex","ow","risk"),
  expo = c("Ap"),
  med = c("Mp"),
  tvar = c("L1","L2","L3"),
  outc = c("Yp"),
  lag = 2,
  time = c("mm"),
  data = dat0
) %>% fitg(mreg = c("binomial"),
           lreg = c("binomial","gaussian","gaussian"),
           yreg = "binomial",dof = 3,seed = 0) %>% 
  boot_g(n_boot = 0,repdf = 1) %>% 
  g_form(ii = 1, length = 12, ay = 1, am = 1) %>% data.frame()

test_that("bootg function", {

  # boot_num - Am
  expect_equal(along_redf[,c(1:6)],test_redf[,c(1:6)])
  expect_equal(along_redf[,c("v1","v2","v3","v4","lastid","Yp")],
               test_redf[,c("v1","v2","v3","v4","lastid","Yp")])

  expect_equal(along_redf[,c("M1p")],test_redf[,c("M1")])
  expect_equal(along_redf[,c("T1mp")],test_redf[,c("Lmp1")])
  expect_equal(along_redf[,c("T1p")],test_redf[,c("Lp1")])
  expect_equal(along_redf[,c("T2mp")],test_redf[,c("Lmp2")])
  expect_equal(along_redf[,c("T2p")],test_redf[,c("Lp2")])
  expect_equal(along_redf[,c("T3mp")],test_redf[,c("Lmp3")])
  expect_equal(along_redf[,c("T3p")], test_redf[,c("Lp3")])
})
```

## Test AM = 1, AY = 0, patient number 2

```{r}
along_redf <- gform(ii = 2, pgdat = MC, length = 12, ay = 0, am = 1) %>% 
  as.data.frame()

test_redf <- process_data(
  fix = c("age","sex","ow","risk"),
  expo = c("Ap"),
  med = c("Mp"),
  tvar = c("L1","L2","L3"),
  outc = c("Yp"),
  lag = 2,
  time = c("mm"),
  data = dat0
) %>% fitg(mreg = c("binomial"),
           lreg = c("binomial","gaussian","gaussian"),
           yreg = "binomial",dof = 3,seed = 0) %>% 
  boot_g(n_boot = 0,repdf = 1) %>% 
  g_form(ii = 2, length = 12, ay = 0, am = 1) %>% data.frame()

test_that("bootg function", {

  # boot_num - Am
  expect_equal(along_redf[,c(1:6)],test_redf[,c(1:6)])
  expect_equal(along_redf[,c("v1","v2","v3","v4","lastid","Yp")],
               test_redf[,c("v1","v2","v3","v4","lastid","Yp")])

  expect_equal(along_redf[,c("M1p")],test_redf[,c("M1")])
  expect_equal(along_redf[,c("T1mp")],test_redf[,c("Lmp1")])
  expect_equal(along_redf[,c("T1p")],test_redf[,c("Lp1")])
  expect_equal(along_redf[,c("T2mp")],test_redf[,c("Lmp2")])
  expect_equal(along_redf[,c("T2p")],test_redf[,c("Lp2")])
  expect_equal(along_redf[,c("T3mp")],test_redf[,c("Lmp3")])
  expect_equal(along_redf[,c("T3p")], test_redf[,c("Lp3")])
})
```

## Test AM = 0, AY = 0, patient number 55

```{r}
along_redf <- gform(ii = 55, pgdat = MC, length = 12, ay = 0, am = 0) %>% 
  as.data.frame()

test_redf <- process_data(
  fix = c("age","sex","ow","risk"),
  expo = c("Ap"),
  med = c("Mp"),
  tvar = c("L1","L2","L3"),
  outc = c("Yp"),
  lag = 2,
  time = c("mm"),
  data = dat0
) %>% fitg(mreg = c("binomial"),
           lreg = c("binomial","gaussian","gaussian"),
           yreg = "binomial",dof = 3,seed = 0) %>% 
  boot_g(n_boot = 0,repdf = 1) %>% 
  g_form(ii = 55, length = 12, ay = 0, am = 0) %>% data.frame()

test_that("bootg function", {

  # boot_num - Am
  expect_equal(along_redf[,c(1:6)],test_redf[,c(1:6)])
  expect_equal(along_redf[,c("v1","v2","v3","v4","lastid","Yp")],
               test_redf[,c("v1","v2","v3","v4","lastid","Yp")])

  expect_equal(along_redf[,c("M1p")],test_redf[,c("M1")])
  expect_equal(along_redf[,c("T1mp")],test_redf[,c("Lmp1")])
  expect_equal(along_redf[,c("T1p")],test_redf[,c("Lp1")])
  expect_equal(along_redf[,c("T2mp")],test_redf[,c("Lmp2")])
  expect_equal(along_redf[,c("T2p")],test_redf[,c("Lp2")])
  expect_equal(along_redf[,c("T3mp")],test_redf[,c("Lmp3")])
  expect_equal(along_redf[,c("T3p")], test_redf[,c("Lp3")])
})
```

# Multiple mediator

```{r}
process_data(
  fix = c("age","sex","ow"),
  expo = c("Ap"),
  med = c("Mp","risk"),
  tvar = c("L1","L2","L3"),
  outc = c("Yp"),
  lag = 2,
  time = c("mm"),
  data = dat0
) %>% fitg(mreg = c("binomial","binomial"),
           lreg = c("binomial","gaussian","gaussian"),
           yreg = "binomial",dof = 3,seed = 0) %>% 
  boot_g(n_boot = 0,repdf = 1) %>% 
  g_form(ii = 1, length = 12, ay = 1, am = 1)
```

## lag = 3

```{r}
process_data(
  fix = c("age","sex","ow","risk"),
  expo = c("Ap"),
  med = c("Mp"),
  tvar = c("L1","L2","L3"),
  outc = c("Yp"),
  lag = 3,
  time = c("mm"),
  data = dat0
) %>% fitg(mreg = c("binomial"),
           lreg = c("binomial","gaussian","gaussian"),
           yreg = "binomial",dof = 3,seed = 0) %>%
  boot_g(n_boot = 0,repdf = 1) %>%
  g_form(ii = 1, length = 12, ay = 1, am = 0)
```

## run

```{r}
library(doParallel)
library(furrr)

fitR2 <- process_data(
  fix = c("age","sex","ow","risk"),
  expo = c("Ap"),
  med = c("Mp"),
  tvar = c("L1","L2","L3"),
  outc = c("Yp"),
  lag = 2,
  time = c("mm"),
  data = dat0
) %>% fitg(mreg = "binomial",
           lreg = c("binomial","gaussian","gaussian"),
           yreg = "binomial",dof = 3,seed = 0) %>% 
  boot_g(n_boot = 10000,repdf = 1) 


cl <- makeCluster(8)
registerDoParallel(cl)

gform_wrapper2 <- function(iii, data, length) {
  outdat11 <- g_form(ii = iii,data=data, length = length, ay = 1, am = 1)
  outdat10 <- g_form(ii = iii,data=data, length = length, ay = 1, am = 0)
  outdat00 <- g_form(ii = iii,data=data, length = length, ay = 0, am = 0)
  bind_rows(outdat11, outdat10, outdat00)
}


resultDatM <- future_map_dfr(1:100,  ~ gform_wrapper2(ii = .x, data = fitR2, length = 12))
  
ExtResult <- function(data) {
  Q11 <- data |> filter(lastid == 1 & Ay ==1 & Am ==1)
  Q10 <- data |> filter(lastid == 1 & Ay ==1 & Am ==0)
  Q00 <- data |> filter(lastid == 1 & Ay ==0 & Am ==0)
  
  cat("Q(1,1):", round(mean(Q11$Yp), 3),'\n')
  cat("Q(1,0):", round(mean(Q10$Yp), 3),'\n')
  cat("Q(0,0):", round(mean(Q00$Yp), 3),'\n')
  
  cat("Indirect:", round(mean(Q11$Yp) - mean(Q10$Yp), 3),'\n')
  cat("Direct:", round(mean(Q10$Yp) - mean(Q00$Yp), 3),'\n')
  cat("Total:", round(mean(Q11$Yp) - mean(Q00$Yp), 3),'\n')
  cat("Proportional explain:", 
      round((mean(Q11$Yp) - mean(Q10$Yp))/(mean(Q11$Yp) - mean(Q00$Yp)), 3),'\n')
}

ExtResult(resultDatM)
```
